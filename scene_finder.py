import os
import dhash
from PIL import Image
from itertools import cycle

if __name__ == '__main__':
    # load the images
    root_folder = '/home/cbb10g/Documents/imcd_data/lifeloggers_images/imcd_1620701/'
    files_list = [f for f in os.listdir(root_folder) if f.endswith('.JPG')]
    files_list.sort()

    # compute hash for the images
    hashes = []
    for index, file in enumerate(files_list):
        try:
            image = Image.open(root_folder+file)
            row, col = dhash.dhash_row_col(image)
            img_hash = dhash.format_hex(row, col)
            hashes.append(img_hash)
        except OSError:
            print("Can't read this file: {} - removing from the list".format(file))
            del files_list[index]
    print(hashes)

    # get bits differences
    bit_diffs = []

    for index, hash_elem in enumerate(hashes[:-1]):
        bit_diff = dhash.get_num_bits_different(int(hash_elem, 16), int(hashes[index+1], 16))
        bit_diffs.append(bit_diff)
    print(bit_diffs)

    # [TODO] investigate how to find the scenes from the sequence
    bit_diffs = [54, 72, 68, 55, 34, 49, 40, 32, 28, 46, 34, 35, 41, 56, 50, 43, 45, 54, 55, 44, 53, 55, 62, 56, 32, 60, 55, 30, 37, 55, 53, 44, 37, 21, 29, 49, 44, 43, 42, 46, 44, 51, 55, 39, 46, 43, 62, 70, 64, 40, 49, 43, 41, 48, 59, 65, 56, 63, 36, 58, 75, 10, 13, 28, 19, 80, 71, 42, 52, 38, 44, 58, 33, 11, 72, 59, 66, 65, 54, 65, 54, 60, 68, 63, 56, 59, 54, 65, 26, 65, 47, 63, 56, 59, 66, 26, 54, 70, 66, 63, 53, 58, 67, 52, 71, 72, 63, 52, 47, 65, 48, 50, 33, 61, 55, 54, 54, 63, 48, 45, 69, 56, 57, 63, 55, 69, 51, 13, 66, 17, 33, 61, 47, 25, 59, 75, 58, 51, 58, 49, 52, 64, 39, 55, 55, 42, 50, 57, 45, 72, 73, 57, 69, 59, 46, 32, 21, 25, 27, 37, 52, 55, 49, 59, 55, 59, 58, 54, 31, 21, 37, 23, 6, 5, 3, 23, 22, 4, 31, 13, 42, 43, 39, 41, 11, 38, 57, 64, 26, 33, 31, 27, 54, 61, 58, 60, 72, 63, 57, 61, 61, 52, 55, 71, 51, 46, 57, 61, 66, 47, 50, 37, 53, 66, 64, 63, 60, 61, 64, 62, 55, 63, 47, 58, 68, 52, 43, 38, 46, 46, 43, 56, 56, 24, 46, 53, 40, 53, 40, 65, 54, 31, 37, 37, 33, 11, 22, 62, 57, 64, 60, 40, 50, 36, 24, 33, 40, 38, 26, 48, 43, 39, 41, 24, 33, 29, 42, 41, 46, 47, 42, 39, 52, 55, 71, 61, 28, 40, 31, 51, 28, 53, 50, 60, 61, 42, 57, 52, 40, 18, 28, 18, 55, 63, 65, 65, 70, 62, 55, 59, 53, 26, 34, 24, 18, 18, 21, 28, 10, 60, 68, 59, 56, 47, 40, 63, 61, 52, 61, 56, 52, 46, 40, 69, 67, 68, 49, 51, 60, 55, 44, 66, 57, 32, 13, 68, 69, 44, 48, 49, 53, 22, 15, 22, 72, 72, 73, 62, 39, 52, 43, 34, 33, 57, 61, 48, 40, 51, 52, 52, 35, 35, 35, 51, 55, 58, 51, 54, 37, 57, 56, 56, 53, 35, 53, 47, 42, 41, 55, 27, 49, 69, 48, 58, 48, 48, 54, 60, 61, 61, 49, 53, 59, 44, 40, 54, 49, 44, 63, 44, 55, 61, 62, 54, 42, 59, 57, 43, 55, 67, 43, 66, 63, 68, 38, 43, 67, 65, 54, 62, 47, 32, 42, 51, 60, 63, 33, 50, 36, 59, 54, 50, 47, 47, 39, 59, 53, 65, 51, 53, 35, 43, 56, 57, 44, 39, 34, 31, 38, 38, 58, 60, 51, 40, 37, 27, 34, 70, 62, 51, 65, 57, 66, 65, 56, 29, 16, 50, 53, 59, 49, 48, 48, 47, 35, 59, 43, 48, 44, 35, 58, 54, 49, 24, 41, 51, 36, 28, 59, 50, 58, 35, 43, 44, 71, 48, 58, 57, 38, 35, 52, 51, 51, 56, 61, 50, 64, 61, 59, 75, 29, 68, 49, 50, 43, 55, 53, 50, 49, 54, 51, 57, 62, 51, 56, 36, 53, 45, 32, 42, 51, 50, 45, 63, 56, 51, 52, 59, 70, 51, 58, 40, 40, 50, 51, 63, 51, 45, 64, 51, 56, 73, 48, 6, 28, 9, 4, 53, 34, 34, 51, 48, 43, 45, 40, 24, 58, 63, 81, 74, 65, 56, 48, 42, 51, 51, 57, 51, 65, 48, 52, 51, 48, 49, 44, 31, 45, 55, 45, 33, 49, 61, 54, 46, 42, 41, 44, 50, 61, 68, 46, 69, 69, 54, 61, 60, 54, 61, 60, 60, 53, 21, 59, 73, 34, 45, 43, 62, 59, 43, 67, 48, 51, 56, 68, 55, 66, 55, 73, 70, 52, 32, 67, 74, 54, 24, 24, 28, 63, 54, 70, 33, 56, 60, 62, 57, 50, 67, 50, 63, 62, 55, 58, 58, 63, 35, 66, 68, 60, 70, 53, 63, 53, 54, 61, 64, 63, 40, 68, 44, 51, 41, 55, 57, 43, 43, 41, 33, 33, 31, 18, 50, 64, 41, 45, 46, 55, 44, 34, 33, 61, 42, 10, 8, 72, 55, 62, 60, 54, 65, 56, 71, 66, 51, 58, 61, 26, 18, 34, 25, 23, 25, 24, 23, 38, 49, 56, 41, 68, 66, 71, 68, 40, 49, 76, 52, 68, 56, 71, 66, 62, 72, 68, 53, 36, 37, 38, 40, 27, 29, 35, 29, 48, 50, 47, 46, 36, 44, 49, 23, 40, 26, 14, 32, 40, 40, 57, 52, 65, 49, 27, 21, 33, 43, 42, 33, 35, 41, 31, 45, 44, 27, 46, 35, 64, 74, 78, 45, 56, 65, 42, 64, 47, 59, 40, 52, 45, 39, 51, 49, 50, 57, 55, 39, 53, 45, 52, 55, 66, 43, 71, 63, 92, 63, 67, 63, 60, 53, 59, 52, 42, 43, 77, 68, 44, 42, 52, 46, 60, 57, 37, 31, 39, 59, 56, 40, 28, 42, 51, 51, 55, 51, 46, 45, 56, 68, 11, 1, 0, 2, 1, 1, 0, 2, 2, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 1, 11, 66, 60, 57, 43, 49, 56, 52, 41, 51, 45, 41, 49, 62, 65, 55, 64, 43, 39, 76, 69, 33, 58, 56, 40, 2, 29, 22, 10, 31, 31, 5, 10, 55, 41, 26, 24, 33, 20, 73, 69, 55, 54, 43, 34, 34, 51, 78, 67, 53, 62, 49, 71, 48, 64, 61, 48, 43, 32, 66, 73, 55, 62, 49, 67, 61, 60, 73, 67, 32, 26, 46, 23, 31, 61, 66, 30, 42, 59, 63, 30, 71, 68, 51, 74, 62, 64, 68, 40, 59, 63, 32, 50, 28, 30, 57, 43, 69, 76, 59, 65, 60, 63, 60, 45, 45, 48, 40, 41, 72, 59, 58, 69, 63, 54, 56, 60, 60, 44, 47, 35, 60, 64, 60, 46, 61, 45, 57, 50, 26, 51, 40, 40, 28, 30, 40, 51, 45, 43, 51, 71, 40, 26, 54, 59, 55]

    # groups = [[bit_diffs[0]]]
    # for index, x in enumerate(bit_diffs[1:]):
    #     if abs(x - groups[-1][-1]) <= 5:
    #         groups[-1].append(x)
    #     else:
    #         groups.append([x])
    # print(groups)

    groups = [{"start_index": 0, "values": [bit_diffs[0]]}]
    for index, x in enumerate(bit_diffs[1:]):
        if abs(x - groups[-1].get("values")[-1]) < 7:
            groups[-1]["values"].append(x)
        else:
            groups.append({"start_index": index, "values": [x]})

    # discard unwanted scenes
    keep_groups = [group for group in groups if all(element < 7 for element in group["values"])]

    # find the sequences of the images
    sequences = []
    for group in keep_groups:
        print(group)
        print(len(group["values"]))
        sequences.append(files_list[group["start_index"]:group["start_index"] + len(group["values"]) + 1])
    for sequence in sequences:
        print(sequence)
        print(len(sequence))
    # get the actual names of the images corresponding to the groups



